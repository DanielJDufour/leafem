% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addGeoRaster.R
\name{addGeotiff}
\alias{addGeotiff}
\title{Add a GeoTIFF file to a leaflet map using optimised rendering.}
\usage{
addGeotiff(
  map,
  file = NULL,
  url = NULL,
  group = NULL,
  layerId = NULL,
  resolution = 96,
  opacity = 0.8,
  options = leaflet::tileOptions(),
  colorOptions = NULL,
  pixelValuesToColorFn = NULL,
  ...
)
}
\arguments{
\item{map}{the map to add the raster data to.}

\item{file}{path to the GeoTIFF file to render.}

\item{url}{url to the GeoTIFF file to render. Ignored if \code{file} is provided.}

\item{group}{he name of the group this raster image should belong to.}

\item{layerId}{the layerId.}

\item{resolution}{the target resolution for the simple nearest neighbor interpolation.
Larger values will result in more detailed rendering, but may impact performance.
Default is 96 (pixels).}

\item{opacity}{opacity of the rendered layer.}

\item{options}{options to be passed to the layer.
See \code{\link[leaflet]{tileOptions}} for details.}

\item{colorOptions}{list defining the palette, breaks and na.color to be used.}

\item{pixelValuesToColorFn}{optional JS function to be passed to the browser.
Can be used to fine tune and manipulate the color mapping.
See examples & \url{https://github.com/r-spatial/leafem/issues/25} for some examples.}

\item{...}{currently not used.}
}
\value{
A leaflet map object.
}
\description{
Add a GeoTIFF file to a leaflet map using optimised rendering.
}
\details{
This uses the leaflet plugin 'georaster-layer-for-leaflet' to render GeoTIFF data.
See \url{https://github.com/GeoTIFF/georaster-layer-for-leaflet} for details.
The GeoTIFF file is read directly in the browser using geotiffjs
(\url{https://geotiffjs.github.io/}), so there's no need to read data into
the current R session. GeoTIFF files can be read from the file system or via url.
The clue is that rendering uses simple nearest neighbor interpolation on-the-fly
to ensure smooth rendering. This enables handling of larger rasters than with
the standard \code{\link[leaflet]{addRasterImage}}.
}
\examples{
if (interactive()) {
  library(leaflet)
  library(leafem)

  chrpsfl_202004 = "https://data.chc.ucsb.edu/products/CHIRPS-2.0/africa_monthly/tifs/chirps-v2.0.2020.04.tif.gz"
  dsn_202004 = file.path(tempdir(), basename(chrpsfl_202004))

  download.file(chrpsfl_202004, dsn_202004)

  tiffl_202004 = gsub(".gz", "", dsn_202004)
  R.utils::gunzip(dsn_202004, tiffl_202004)

  myCustomJSFunc = htmlwidgets::JS(
    "
      pixelValuesToColorFn = (raster, colorOptions) => {
        const cols = colorOptions.palette;
        var scale = chroma.scale(cols);

        if (colorOptions.breaks !== null) {
          scale = scale.classes(colorOptions.breaks);
        }
        var pixelFunc = values => {
          let clr = scale.domain([raster.mins, raster.maxs]);
          if (isNaN(values)) return colorOptions.naColor;
          if (values < 120) return colorOptions.naColor;
          return clr(values).hex();
        };
        return pixelFunc;
      };
    "
  )

  leaflet() \%>\%
    addTiles() \%>\%
    addGeotiff(
      file = tiffl_202004
      , opacity = 0.9
      , colorOptions = colorOptions(
        palette = hcl.colors(256, "viridis")
        , breaks = seq(0, 1000, 10)
        , na.color = "transparent"
      )
      , pixelValuesToColorFn = myCustomJSFunc
    )

}

}
