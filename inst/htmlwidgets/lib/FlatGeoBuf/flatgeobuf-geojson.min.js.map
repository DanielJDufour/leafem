{"version":3,"file":"flatgeobuf-geojson.min.js","sources":["../node_modules/flatbuffers/js/flatbuffers.mjs","../lib/ColumnType.js","../node_modules/slice-source/empty.js","../node_modules/slice-source/concat.js","../node_modules/slice-source/index.js","../node_modules/slice-source/read.js","../node_modules/slice-source/slice.js","../node_modules/slice-source/cancel.js","../lib/ColumnMeta.js","../lib/header_generated.js","../lib/feature_generated.js","../lib/HeaderMeta.js","../lib/generic/geometry.js","../lib/geojson/geometry.js","../lib/geojson/feature.js","../lib/packedrtree.js","../lib/geojson/featurecollection.js","../lib/geojson.js"],"sourcesContent":["/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","var ColumnType;\n(function (ColumnType) {\n    ColumnType[ColumnType[\"Byte\"] = 0] = \"Byte\";\n    ColumnType[ColumnType[\"UByte\"] = 1] = \"UByte\";\n    ColumnType[ColumnType[\"Bool\"] = 2] = \"Bool\";\n    ColumnType[ColumnType[\"Short\"] = 3] = \"Short\";\n    ColumnType[ColumnType[\"UShort\"] = 4] = \"UShort\";\n    ColumnType[ColumnType[\"Int\"] = 5] = \"Int\";\n    ColumnType[ColumnType[\"UInt\"] = 6] = \"UInt\";\n    ColumnType[ColumnType[\"Long\"] = 7] = \"Long\";\n    ColumnType[ColumnType[\"ULong\"] = 8] = \"ULong\";\n    ColumnType[ColumnType[\"Float\"] = 9] = \"Float\";\n    ColumnType[ColumnType[\"Double\"] = 10] = \"Double\";\n    ColumnType[ColumnType[\"String\"] = 11] = \"String\";\n    ColumnType[ColumnType[\"Json\"] = 12] = \"Json\";\n    ColumnType[ColumnType[\"DateTime\"] = 13] = \"DateTime\";\n    ColumnType[ColumnType[\"Binary\"] = 14] = \"Binary\";\n})(ColumnType || (ColumnType = {}));\nexport default ColumnType;\n//# sourceMappingURL=ColumnType.js.map","export default new Uint8Array(0);\n","export default function concat(a, b) {\n  if (!a.length) return b;\n  if (!b.length) return a;\n  var c = new Uint8Array(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n  return c;\n}\n","import empty from \"./empty\";\nimport slice_cancel from \"./cancel\";\nimport slice_read from \"./read\";\nimport slice_slice from \"./slice\";\n\nexport default function slice(source) {\n  return typeof source.slice === \"function\" ? source :\n      new SliceSource(typeof source.read === \"function\" ? source\n          : source.getReader());\n}\n\nfunction SliceSource(source) {\n  this._source = source;\n  this._array = empty;\n  this._index = 0;\n}\n\nSliceSource.prototype.read = slice_read;\nSliceSource.prototype.slice = slice_slice;\nSliceSource.prototype.cancel = slice_cancel;\n","import concat from \"./concat\";\nimport empty from \"./empty\";\n\nexport default function() {\n  var that = this, array = that._array.subarray(that._index);\n  return that._source.read().then(function(result) {\n    that._array = empty;\n    that._index = 0;\n    return result.done ? (array.length > 0\n        ? {done: false, value: array}\n        : {done: true, value: undefined})\n        : {done: false, value: concat(array, result.value)};\n  });\n}\n","import empty from \"./empty\";\n\nexport default function(length) {\n  if ((length |= 0) < 0) throw new Error(\"invalid length\");\n  var that = this, index = this._array.length - this._index;\n\n  // If the request fits within the remaining buffer, resolve it immediately.\n  if (this._index + length <= this._array.length) {\n    return Promise.resolve(this._array.subarray(this._index, this._index += length));\n  }\n\n  // Otherwise, read chunks repeatedly until the request is fulfilled.\n  var array = new Uint8Array(length);\n  array.set(this._array.subarray(this._index));\n  return (function read() {\n    return that._source.read().then(function(result) {\n\n      // When done, it’s possible the request wasn’t fully fullfilled!\n      // If so, the pre-allocated array is too big and needs slicing.\n      if (result.done) {\n        that._array = empty;\n        that._index = 0;\n        return index > 0 ? array.subarray(0, index) : null;\n      }\n\n      // If this chunk fulfills the request, return the resulting array.\n      if (index + result.value.length >= length) {\n        that._array = result.value;\n        that._index = length - index;\n        array.set(result.value.subarray(0, length - index), index);\n        return array;\n      }\n\n      // Otherwise copy this chunk into the array, then read the next chunk.\n      array.set(result.value, index);\n      index += result.value.length;\n      return read();\n    });\n  })();\n}\n","export default function() {\n  return this._source.cancel();\n}\n","export default class ColumnMeta {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n}\n//# sourceMappingURL=ColumnMeta.js.map","export var GeometryType;\n(function (GeometryType) {\n    GeometryType[GeometryType[\"Unknown\"] = 0] = \"Unknown\";\n    GeometryType[GeometryType[\"Point\"] = 1] = \"Point\";\n    GeometryType[GeometryType[\"LineString\"] = 2] = \"LineString\";\n    GeometryType[GeometryType[\"Polygon\"] = 3] = \"Polygon\";\n    GeometryType[GeometryType[\"MultiPoint\"] = 4] = \"MultiPoint\";\n    GeometryType[GeometryType[\"MultiLineString\"] = 5] = \"MultiLineString\";\n    GeometryType[GeometryType[\"MultiPolygon\"] = 6] = \"MultiPolygon\";\n    GeometryType[GeometryType[\"GeometryCollection\"] = 7] = \"GeometryCollection\";\n    GeometryType[GeometryType[\"CircularString\"] = 8] = \"CircularString\";\n    GeometryType[GeometryType[\"CompoundCurve\"] = 9] = \"CompoundCurve\";\n    GeometryType[GeometryType[\"CurvePolygon\"] = 10] = \"CurvePolygon\";\n    GeometryType[GeometryType[\"MultiCurve\"] = 11] = \"MultiCurve\";\n    GeometryType[GeometryType[\"MultiSurface\"] = 12] = \"MultiSurface\";\n    GeometryType[GeometryType[\"Curve\"] = 13] = \"Curve\";\n    GeometryType[GeometryType[\"Surface\"] = 14] = \"Surface\";\n    GeometryType[GeometryType[\"PolyhedralSurface\"] = 15] = \"PolyhedralSurface\";\n    GeometryType[GeometryType[\"TIN\"] = 16] = \"TIN\";\n    GeometryType[GeometryType[\"Triangle\"] = 17] = \"Triangle\";\n})(GeometryType || (GeometryType = {}));\n;\nexport var ColumnType;\n(function (ColumnType) {\n    ColumnType[ColumnType[\"Byte\"] = 0] = \"Byte\";\n    ColumnType[ColumnType[\"UByte\"] = 1] = \"UByte\";\n    ColumnType[ColumnType[\"Bool\"] = 2] = \"Bool\";\n    ColumnType[ColumnType[\"Short\"] = 3] = \"Short\";\n    ColumnType[ColumnType[\"UShort\"] = 4] = \"UShort\";\n    ColumnType[ColumnType[\"Int\"] = 5] = \"Int\";\n    ColumnType[ColumnType[\"UInt\"] = 6] = \"UInt\";\n    ColumnType[ColumnType[\"Long\"] = 7] = \"Long\";\n    ColumnType[ColumnType[\"ULong\"] = 8] = \"ULong\";\n    ColumnType[ColumnType[\"Float\"] = 9] = \"Float\";\n    ColumnType[ColumnType[\"Double\"] = 10] = \"Double\";\n    ColumnType[ColumnType[\"String\"] = 11] = \"String\";\n    ColumnType[ColumnType[\"Json\"] = 12] = \"Json\";\n    ColumnType[ColumnType[\"DateTime\"] = 13] = \"DateTime\";\n    ColumnType[ColumnType[\"Binary\"] = 14] = \"Binary\";\n})(ColumnType || (ColumnType = {}));\n;\nexport class Column {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    type() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (this.bb.readUint8(this.bb_pos + offset)) : ColumnType.Byte;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(2);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    ;\n    static addType(builder, type) {\n        builder.addFieldInt8(1, type, ColumnType.Byte);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        builder.requiredField(offset, 4);\n        return offset;\n    }\n    ;\n    static create(builder, nameOffset, type) {\n        Column.start(builder);\n        Column.addName(builder, nameOffset);\n        Column.addType(builder, type);\n        return Column.end(builder);\n    }\n}\nexport class Crs {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Crs).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Crs).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    org(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    code() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    description(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    wkt(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(5);\n    }\n    ;\n    static addOrg(builder, orgOffset) {\n        builder.addFieldOffset(0, orgOffset, 0);\n    }\n    ;\n    static addCode(builder, code) {\n        builder.addFieldInt32(1, code, 0);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(2, nameOffset, 0);\n    }\n    ;\n    static addDescription(builder, descriptionOffset) {\n        builder.addFieldOffset(3, descriptionOffset, 0);\n    }\n    ;\n    static addWkt(builder, wktOffset) {\n        builder.addFieldOffset(4, wktOffset, 0);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static create(builder, orgOffset, code, nameOffset, descriptionOffset, wktOffset) {\n        Crs.start(builder);\n        Crs.addOrg(builder, orgOffset);\n        Crs.addCode(builder, code);\n        Crs.addName(builder, nameOffset);\n        Crs.addDescription(builder, descriptionOffset);\n        Crs.addWkt(builder, wktOffset);\n        return Crs.end(builder);\n    }\n}\nexport class Header {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Header).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Header).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    envelope(index) {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    envelopeLength() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    envelopeArray() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    geometryType() {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (this.bb.readUint8(this.bb_pos + offset)) : GeometryType.Unknown;\n    }\n    ;\n    hasZ() {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasM() {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasT() {\n        var offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasTM() {\n        var offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    columns(index, obj) {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? (obj || new Column).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    ;\n    columnsLength() {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    featuresCount() {\n        var offset = this.bb.__offset(this.bb_pos, 20);\n        return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    ;\n    indexNodeSize() {\n        var offset = this.bb.__offset(this.bb_pos, 22);\n        return offset ? this.bb.readUint16(this.bb_pos + offset) : 16;\n    }\n    ;\n    crs(obj) {\n        var offset = this.bb.__offset(this.bb_pos, 24);\n        return offset ? (obj || new Crs).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(11);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    ;\n    static addEnvelope(builder, envelopeOffset) {\n        builder.addFieldOffset(1, envelopeOffset, 0);\n    }\n    ;\n    static createEnvelopeVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startEnvelopeVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addGeometryType(builder, geometryType) {\n        builder.addFieldInt8(2, geometryType, GeometryType.Unknown);\n    }\n    ;\n    static addHasZ(builder, hasZ) {\n        builder.addFieldInt8(3, +hasZ, +false);\n    }\n    ;\n    static addHasM(builder, hasM) {\n        builder.addFieldInt8(4, +hasM, +false);\n    }\n    ;\n    static addHasT(builder, hasT) {\n        builder.addFieldInt8(5, +hasT, +false);\n    }\n    ;\n    static addHasTM(builder, hasTM) {\n        builder.addFieldInt8(6, +hasTM, +false);\n    }\n    ;\n    static addColumns(builder, columnsOffset) {\n        builder.addFieldOffset(7, columnsOffset, 0);\n    }\n    ;\n    static createColumnsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startColumnsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    ;\n    static addFeaturesCount(builder, featuresCount) {\n        builder.addFieldInt64(8, featuresCount, builder.createLong(0, 0));\n    }\n    ;\n    static addIndexNodeSize(builder, indexNodeSize) {\n        builder.addFieldInt16(9, indexNodeSize, 16);\n    }\n    ;\n    static addCrs(builder, crsOffset) {\n        builder.addFieldOffset(10, crsOffset, 0);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static finishBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    ;\n    static finishSizePrefixedBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    ;\n    static create(builder, nameOffset, envelopeOffset, geometryType, hasZ, hasM, hasT, hasTM, columnsOffset, featuresCount, indexNodeSize, crsOffset) {\n        Header.start(builder);\n        Header.addName(builder, nameOffset);\n        Header.addEnvelope(builder, envelopeOffset);\n        Header.addGeometryType(builder, geometryType);\n        Header.addHasZ(builder, hasZ);\n        Header.addHasM(builder, hasM);\n        Header.addHasT(builder, hasT);\n        Header.addHasTM(builder, hasTM);\n        Header.addColumns(builder, columnsOffset);\n        Header.addFeaturesCount(builder, featuresCount);\n        Header.addIndexNodeSize(builder, indexNodeSize);\n        Header.addCrs(builder, crsOffset);\n        return Header.end(builder);\n    }\n}\n//# sourceMappingURL=header_generated.js.map","export var GeometryType;\n(function (GeometryType) {\n    GeometryType[GeometryType[\"Unknown\"] = 0] = \"Unknown\";\n    GeometryType[GeometryType[\"Point\"] = 1] = \"Point\";\n    GeometryType[GeometryType[\"LineString\"] = 2] = \"LineString\";\n    GeometryType[GeometryType[\"Polygon\"] = 3] = \"Polygon\";\n    GeometryType[GeometryType[\"MultiPoint\"] = 4] = \"MultiPoint\";\n    GeometryType[GeometryType[\"MultiLineString\"] = 5] = \"MultiLineString\";\n    GeometryType[GeometryType[\"MultiPolygon\"] = 6] = \"MultiPolygon\";\n    GeometryType[GeometryType[\"GeometryCollection\"] = 7] = \"GeometryCollection\";\n    GeometryType[GeometryType[\"CircularString\"] = 8] = \"CircularString\";\n    GeometryType[GeometryType[\"CompoundCurve\"] = 9] = \"CompoundCurve\";\n    GeometryType[GeometryType[\"CurvePolygon\"] = 10] = \"CurvePolygon\";\n    GeometryType[GeometryType[\"MultiCurve\"] = 11] = \"MultiCurve\";\n    GeometryType[GeometryType[\"MultiSurface\"] = 12] = \"MultiSurface\";\n    GeometryType[GeometryType[\"Curve\"] = 13] = \"Curve\";\n    GeometryType[GeometryType[\"Surface\"] = 14] = \"Surface\";\n    GeometryType[GeometryType[\"PolyhedralSurface\"] = 15] = \"PolyhedralSurface\";\n    GeometryType[GeometryType[\"TIN\"] = 16] = \"TIN\";\n    GeometryType[GeometryType[\"Triangle\"] = 17] = \"Triangle\";\n})(GeometryType || (GeometryType = {}));\n;\nexport var ColumnType;\n(function (ColumnType) {\n    ColumnType[ColumnType[\"Byte\"] = 0] = \"Byte\";\n    ColumnType[ColumnType[\"UByte\"] = 1] = \"UByte\";\n    ColumnType[ColumnType[\"Bool\"] = 2] = \"Bool\";\n    ColumnType[ColumnType[\"Short\"] = 3] = \"Short\";\n    ColumnType[ColumnType[\"UShort\"] = 4] = \"UShort\";\n    ColumnType[ColumnType[\"Int\"] = 5] = \"Int\";\n    ColumnType[ColumnType[\"UInt\"] = 6] = \"UInt\";\n    ColumnType[ColumnType[\"Long\"] = 7] = \"Long\";\n    ColumnType[ColumnType[\"ULong\"] = 8] = \"ULong\";\n    ColumnType[ColumnType[\"Float\"] = 9] = \"Float\";\n    ColumnType[ColumnType[\"Double\"] = 10] = \"Double\";\n    ColumnType[ColumnType[\"String\"] = 11] = \"String\";\n    ColumnType[ColumnType[\"Json\"] = 12] = \"Json\";\n    ColumnType[ColumnType[\"DateTime\"] = 13] = \"DateTime\";\n    ColumnType[ColumnType[\"Binary\"] = 14] = \"Binary\";\n})(ColumnType || (ColumnType = {}));\n;\nexport class Column {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    type() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (this.bb.readUint8(this.bb_pos + offset)) : ColumnType.Byte;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(2);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    ;\n    static addType(builder, type) {\n        builder.addFieldInt8(1, type, ColumnType.Byte);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        builder.requiredField(offset, 4);\n        return offset;\n    }\n    ;\n    static create(builder, nameOffset, type) {\n        Column.start(builder);\n        Column.addName(builder, nameOffset);\n        Column.addType(builder, type);\n        return Column.end(builder);\n    }\n}\nexport class Crs {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Crs).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Crs).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    org(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    code() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    description(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    wkt(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(5);\n    }\n    ;\n    static addOrg(builder, orgOffset) {\n        builder.addFieldOffset(0, orgOffset, 0);\n    }\n    ;\n    static addCode(builder, code) {\n        builder.addFieldInt32(1, code, 0);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(2, nameOffset, 0);\n    }\n    ;\n    static addDescription(builder, descriptionOffset) {\n        builder.addFieldOffset(3, descriptionOffset, 0);\n    }\n    ;\n    static addWkt(builder, wktOffset) {\n        builder.addFieldOffset(4, wktOffset, 0);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static create(builder, orgOffset, code, nameOffset, descriptionOffset, wktOffset) {\n        Crs.start(builder);\n        Crs.addOrg(builder, orgOffset);\n        Crs.addCode(builder, code);\n        Crs.addName(builder, nameOffset);\n        Crs.addDescription(builder, descriptionOffset);\n        Crs.addWkt(builder, wktOffset);\n        return Crs.end(builder);\n    }\n}\nexport class Header {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Header).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Header).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    name(optionalEncoding) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n    ;\n    envelope(index) {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    envelopeLength() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    envelopeArray() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    geometryType() {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (this.bb.readUint8(this.bb_pos + offset)) : GeometryType.Unknown;\n    }\n    ;\n    hasZ() {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasM() {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasT() {\n        var offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    hasTM() {\n        var offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    ;\n    columns(index, obj) {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? (obj || new Column).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    ;\n    columnsLength() {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    featuresCount() {\n        var offset = this.bb.__offset(this.bb_pos, 20);\n        return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n    }\n    ;\n    indexNodeSize() {\n        var offset = this.bb.__offset(this.bb_pos, 22);\n        return offset ? this.bb.readUint16(this.bb_pos + offset) : 16;\n    }\n    ;\n    crs(obj) {\n        var offset = this.bb.__offset(this.bb_pos, 24);\n        return offset ? (obj || new Crs).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(11);\n    }\n    ;\n    static addName(builder, nameOffset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n    ;\n    static addEnvelope(builder, envelopeOffset) {\n        builder.addFieldOffset(1, envelopeOffset, 0);\n    }\n    ;\n    static createEnvelopeVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startEnvelopeVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addGeometryType(builder, geometryType) {\n        builder.addFieldInt8(2, geometryType, GeometryType.Unknown);\n    }\n    ;\n    static addHasZ(builder, hasZ) {\n        builder.addFieldInt8(3, +hasZ, +false);\n    }\n    ;\n    static addHasM(builder, hasM) {\n        builder.addFieldInt8(4, +hasM, +false);\n    }\n    ;\n    static addHasT(builder, hasT) {\n        builder.addFieldInt8(5, +hasT, +false);\n    }\n    ;\n    static addHasTM(builder, hasTM) {\n        builder.addFieldInt8(6, +hasTM, +false);\n    }\n    ;\n    static addColumns(builder, columnsOffset) {\n        builder.addFieldOffset(7, columnsOffset, 0);\n    }\n    ;\n    static createColumnsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startColumnsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    ;\n    static addFeaturesCount(builder, featuresCount) {\n        builder.addFieldInt64(8, featuresCount, builder.createLong(0, 0));\n    }\n    ;\n    static addIndexNodeSize(builder, indexNodeSize) {\n        builder.addFieldInt16(9, indexNodeSize, 16);\n    }\n    ;\n    static addCrs(builder, crsOffset) {\n        builder.addFieldOffset(10, crsOffset, 0);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static create(builder, nameOffset, envelopeOffset, geometryType, hasZ, hasM, hasT, hasTM, columnsOffset, featuresCount, indexNodeSize, crsOffset) {\n        Header.start(builder);\n        Header.addName(builder, nameOffset);\n        Header.addEnvelope(builder, envelopeOffset);\n        Header.addGeometryType(builder, geometryType);\n        Header.addHasZ(builder, hasZ);\n        Header.addHasM(builder, hasM);\n        Header.addHasT(builder, hasT);\n        Header.addHasTM(builder, hasTM);\n        Header.addColumns(builder, columnsOffset);\n        Header.addFeaturesCount(builder, featuresCount);\n        Header.addIndexNodeSize(builder, indexNodeSize);\n        Header.addCrs(builder, crsOffset);\n        return Header.end(builder);\n    }\n}\nexport class Geometry {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Geometry).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Geometry).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    ends(index) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n    ;\n    endsLength() {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    endsArray() {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    xy(index) {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    xyLength() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    xyArray() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    z(index) {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    zLength() {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    zArray() {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    m(index) {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    mLength() {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    mArray() {\n        var offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    t(index) {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n    }\n    ;\n    tLength() {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    tArray() {\n        var offset = this.bb.__offset(this.bb_pos, 12);\n        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    tm(index) {\n        var offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.readUint64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);\n    }\n    ;\n    tmLength() {\n        var offset = this.bb.__offset(this.bb_pos, 14);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    type() {\n        var offset = this.bb.__offset(this.bb_pos, 16);\n        return offset ? (this.bb.readUint8(this.bb_pos + offset)) : GeometryType.Unknown;\n    }\n    ;\n    parts(index, obj) {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? (obj || new Geometry).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    ;\n    partsLength() {\n        var offset = this.bb.__offset(this.bb_pos, 18);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(8);\n    }\n    ;\n    static addEnds(builder, endsOffset) {\n        builder.addFieldOffset(0, endsOffset, 0);\n    }\n    ;\n    static createEndsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addInt32(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startEndsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    ;\n    static addXy(builder, xyOffset) {\n        builder.addFieldOffset(1, xyOffset, 0);\n    }\n    ;\n    static createXyVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startXyVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addZ(builder, zOffset) {\n        builder.addFieldOffset(2, zOffset, 0);\n    }\n    ;\n    static createZVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startZVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addM(builder, mOffset) {\n        builder.addFieldOffset(3, mOffset, 0);\n    }\n    ;\n    static createMVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startMVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addT(builder, tOffset) {\n        builder.addFieldOffset(4, tOffset, 0);\n    }\n    ;\n    static createTVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addFloat64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startTVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addTm(builder, tmOffset) {\n        builder.addFieldOffset(5, tmOffset, 0);\n    }\n    ;\n    static createTmVector(builder, data) {\n        builder.startVector(8, data.length, 8);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addInt64(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startTmVector(builder, numElems) {\n        builder.startVector(8, numElems, 8);\n    }\n    ;\n    static addType(builder, type) {\n        builder.addFieldInt8(6, type, GeometryType.Unknown);\n    }\n    ;\n    static addParts(builder, partsOffset) {\n        builder.addFieldOffset(7, partsOffset, 0);\n    }\n    ;\n    static createPartsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startPartsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static create(builder, endsOffset, xyOffset, zOffset, mOffset, tOffset, tmOffset, type, partsOffset) {\n        Geometry.start(builder);\n        Geometry.addEnds(builder, endsOffset);\n        Geometry.addXy(builder, xyOffset);\n        Geometry.addZ(builder, zOffset);\n        Geometry.addM(builder, mOffset);\n        Geometry.addT(builder, tOffset);\n        Geometry.addTm(builder, tmOffset);\n        Geometry.addType(builder, type);\n        Geometry.addParts(builder, partsOffset);\n        return Geometry.end(builder);\n    }\n}\nexport class Feature {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    ;\n    static getRoot(bb, obj) {\n        return (obj || new Feature).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    static getSizePrefixedRoot(bb, obj) {\n        return (obj || new Feature).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    ;\n    geometry(obj) {\n        var offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? (obj || new Geometry).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    ;\n    properties(index) {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;\n    }\n    ;\n    propertiesLength() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    propertiesArray() {\n        var offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n    }\n    ;\n    columns(index, obj) {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Column).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n    }\n    ;\n    columnsLength() {\n        var offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    ;\n    static start(builder) {\n        builder.startObject(3);\n    }\n    ;\n    static addGeometry(builder, geometryOffset) {\n        builder.addFieldOffset(0, geometryOffset, 0);\n    }\n    ;\n    static addProperties(builder, propertiesOffset) {\n        builder.addFieldOffset(1, propertiesOffset, 0);\n    }\n    ;\n    static createPropertiesVector(builder, data) {\n        builder.startVector(1, data.length, 1);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addInt8(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startPropertiesVector(builder, numElems) {\n        builder.startVector(1, numElems, 1);\n    }\n    ;\n    static addColumns(builder, columnsOffset) {\n        builder.addFieldOffset(2, columnsOffset, 0);\n    }\n    ;\n    static createColumnsVector(builder, data) {\n        builder.startVector(4, data.length, 4);\n        for (var i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n    ;\n    static startColumnsVector(builder, numElems) {\n        builder.startVector(4, numElems, 4);\n    }\n    ;\n    static end(builder) {\n        var offset = builder.endObject();\n        return offset;\n    }\n    ;\n    static finishBuffer(builder, offset) {\n        builder.finish(offset);\n    }\n    ;\n    static finishSizePrefixedBuffer(builder, offset) {\n        builder.finish(offset, undefined, true);\n    }\n    ;\n    static create(builder, geometryOffset, propertiesOffset, columnsOffset) {\n        Feature.start(builder);\n        Feature.addGeometry(builder, geometryOffset);\n        Feature.addProperties(builder, propertiesOffset);\n        Feature.addColumns(builder, columnsOffset);\n        return Feature.end(builder);\n    }\n}\n//# sourceMappingURL=feature_generated.js.map","export default class HeaderMeta {\n    constructor(geometryType, columns) {\n        this.geometryType = geometryType;\n        this.columns = columns;\n    }\n}\n//# sourceMappingURL=HeaderMeta.js.map","import { GeometryType } from '../header_generated';\nimport { Geometry } from '../feature_generated';\nexport function buildGeometry(builder, parsedGeometry) {\n    const { xy, ends, parts, type } = parsedGeometry;\n    if (parts) {\n        const partOffsets = parts.map(part => buildGeometry(builder, part));\n        const partsOffset = Geometry.createPartsVector(builder, partOffsets);\n        Geometry.start(builder);\n        Geometry.addParts(builder, partsOffset);\n        return Geometry.end(builder);\n    }\n    const coordsOffset = Geometry.createXyVector(builder, xy);\n    let endsOffset = null;\n    if (ends)\n        endsOffset = Geometry.createEndsVector(builder, ends);\n    Geometry.start(builder);\n    if (endsOffset)\n        Geometry.addEnds(builder, endsOffset);\n    Geometry.addXy(builder, coordsOffset);\n    Geometry.addType(builder, type);\n    return Geometry.end(builder);\n}\nexport function flat(a) {\n    return a.reduce((acc, val) => Array.isArray(val) ? acc.concat(flat(val)) : acc.concat(val), []);\n}\nexport function parseGeometry(geometry, type) {\n    let xy = null;\n    let ends = null;\n    let parts = null;\n    if (type === GeometryType.MultiLineString) {\n        xy = geometry.getFlatCoordinates();\n        const mlsEnds = geometry.getEnds();\n        if (mlsEnds.length > 1)\n            ends = mlsEnds.map(e => e >> 1);\n    }\n    else if (type === GeometryType.Polygon) {\n        xy = geometry.getFlatCoordinates();\n        const pEnds = geometry.getEnds();\n        if (pEnds.length > 1)\n            ends = pEnds.map(e => e >> 1);\n    }\n    else if (type === GeometryType.MultiPolygon) {\n        const mp = geometry;\n        parts = mp.getPolygons().map(p => parseGeometry(p, GeometryType.Polygon));\n    }\n    else {\n        xy = geometry.getFlatCoordinates();\n    }\n    return {\n        xy,\n        ends,\n        type,\n        parts\n    };\n}\nexport function pairFlatCoordinates(coordinates) {\n    const newArray = [];\n    for (let i = 0; i < coordinates.length; i += 2)\n        newArray.push([coordinates[i], coordinates[i + 1]]);\n    return newArray;\n}\nexport function toGeometryType(name) {\n    const type = GeometryType[name];\n    return type;\n}\n//# sourceMappingURL=geometry.js.map","import { GeometryType } from '../header_generated';\nimport { Geometry } from '../feature_generated';\nimport { flat, pairFlatCoordinates, toGeometryType } from '../generic/geometry';\nexport function buildGeometry(builder, parsedGeometry) {\n    const { xy, ends, parts, type } = parsedGeometry;\n    if (parts) {\n        const partOffsets = parts.map(part => buildGeometry(builder, part));\n        const partsOffset = Geometry.createPartsVector(builder, partOffsets);\n        Geometry.start(builder);\n        Geometry.addParts(builder, partsOffset);\n        return Geometry.end(builder);\n    }\n    const coordsOffset = Geometry.createXyVector(builder, xy);\n    let endsOffset = null;\n    if (ends)\n        endsOffset = Geometry.createEndsVector(builder, ends);\n    Geometry.start(builder);\n    if (endsOffset)\n        Geometry.addEnds(builder, endsOffset);\n    Geometry.addXy(builder, coordsOffset);\n    Geometry.addType(builder, type);\n    return Geometry.end(builder);\n}\nexport function parseGeometry(geometry) {\n    const cs = geometry.coordinates;\n    let xy = null;\n    let ends = null;\n    let parts = null;\n    let type = toGeometryType(geometry.type);\n    let end = 0;\n    switch (geometry.type) {\n        case 'Point':\n            xy = cs;\n            break;\n        case 'MultiPoint':\n        case 'LineString':\n            xy = flat(cs);\n            break;\n        case 'MultiLineString':\n        case 'Polygon':\n            const css = cs;\n            xy = flat(css);\n            if (css.length > 1)\n                ends = css.map(c => end += c.length);\n            break;\n        case 'MultiPolygon':\n            const csss = cs;\n            const geometries = csss.map(coordinates => ({ type: 'Polygon', coordinates }));\n            parts = geometries.map(parseGeometry);\n            break;\n        case 'GeometryCollection':\n            parts = geometry.geometries.map(parseGeometry);\n            break;\n    }\n    return {\n        xy,\n        ends,\n        type,\n        parts\n    };\n}\nfunction extractParts(xy, ends) {\n    if (!ends || ends.length === 0)\n        return [pairFlatCoordinates(xy)];\n    let s = 0;\n    let xySlices = Array.from(ends)\n        .map(e => xy.slice(s, s = e << 1));\n    return xySlices\n        .map(cs => pairFlatCoordinates(cs));\n}\nfunction toGeoJsonCoordinates(geometry, type) {\n    const xy = geometry.xyArray();\n    switch (type) {\n        case GeometryType.Point:\n            return Array.from(xy);\n        case GeometryType.MultiPoint:\n        case GeometryType.LineString:\n            return pairFlatCoordinates(xy);\n        case GeometryType.MultiLineString:\n            return extractParts(xy, geometry.endsArray());\n        case GeometryType.Polygon:\n            return extractParts(xy, geometry.endsArray());\n    }\n}\nexport function fromGeometry(geometry, type) {\n    if (type == GeometryType.GeometryCollection) {\n        const geometries = [];\n        for (let i = 0; i < geometry.partsLength(); i++) {\n            const part = geometry.parts(i);\n            const partType = part.type();\n            geometries.push(fromGeometry(part, partType));\n        }\n        return {\n            type: GeometryType[type],\n            geometries\n        };\n    }\n    else if (type == GeometryType.MultiPolygon) {\n        const geometries = [];\n        for (let i = 0; i < geometry.partsLength(); i++) {\n            const part = geometry.parts(i);\n            const partType = part.type();\n            geometries.push(fromGeometry(part, partType));\n        }\n        return {\n            type: GeometryType[type],\n            coordinates: geometries.map(g => g.coordinates)\n        };\n    }\n    const coordinates = toGeoJsonCoordinates(geometry, type);\n    return {\n        type: GeometryType[type],\n        coordinates\n    };\n}\n//# sourceMappingURL=geometry.js.map","import { flatbuffers } from 'flatbuffers';\nimport ColumnType from '../ColumnType';\nimport { Feature } from '../feature_generated';\nimport { buildGeometry, parseGeometry, fromGeometry } from './geometry';\nexport function buildFeature(feature, header) {\n    const columns = header.columns;\n    const builder = new flatbuffers.Builder(0);\n    const propertiesArray = new Uint8Array(100000);\n    let offset = 0;\n    if (columns) {\n        const view = new DataView(propertiesArray.buffer);\n        for (let i = 0; i < columns.length; i++) {\n            const column = columns[i];\n            const value = feature.properties[column.name];\n            if (value === null)\n                continue;\n            view.setUint16(offset, i, true);\n            offset += 2;\n            switch (column.type) {\n                case ColumnType.Bool:\n                    view.setUint8(offset, value);\n                    offset += 1;\n                    break;\n                case ColumnType.Short:\n                    view.setInt16(offset, value, true);\n                    offset += 2;\n                    break;\n                case ColumnType.UShort:\n                    view.setUint16(offset, value, true);\n                    offset += 2;\n                    break;\n                case ColumnType.Int:\n                    view.setInt32(offset, value, true);\n                    offset += 4;\n                    break;\n                case ColumnType.UInt:\n                    view.setUint32(offset, value, true);\n                    offset += 4;\n                    break;\n                case ColumnType.Long:\n                    view.setBigInt64(offset, BigInt(value), true);\n                    offset += 8;\n                    break;\n                case ColumnType.Long:\n                    view.setBigUint64(offset, BigInt(value), true);\n                    offset += 8;\n                    break;\n                case ColumnType.Double:\n                    view.setFloat64(offset, value, true);\n                    offset += 8;\n                    break;\n                case ColumnType.String:\n                    const str = value;\n                    const encoder = new TextEncoder();\n                    const stringArray = encoder.encode(str);\n                    view.setUint32(offset, stringArray.length, true);\n                    offset += 4;\n                    propertiesArray.set(stringArray, offset);\n                    offset += stringArray.length;\n                    break;\n                default:\n                    throw new Error('Unknown type');\n            }\n        }\n    }\n    let propertiesOffset = null;\n    if (offset > 0)\n        propertiesOffset = Feature.createPropertiesVector(builder, propertiesArray.slice(0, offset));\n    const geometryOffset = buildGeometry(builder, parseGeometry(feature.geometry));\n    Feature.start(builder);\n    Feature.addGeometry(builder, geometryOffset);\n    if (propertiesOffset)\n        Feature.addProperties(builder, propertiesOffset);\n    const featureOffset = Feature.end(builder);\n    builder.finishSizePrefixed(featureOffset);\n    return builder.asUint8Array();\n}\nexport function fromFeature(feature, header) {\n    const columns = header.columns;\n    let geojsonGeometry;\n    const geometry = feature.geometry();\n    geojsonGeometry = fromGeometry(geometry, header.geometryType);\n    const geojsonProperties = parseProperties(feature, columns);\n    const geoJsonfeature = {\n        type: 'Feature',\n        geometry: geojsonGeometry,\n    };\n    if (geojsonProperties)\n        geoJsonfeature.properties = geojsonProperties;\n    return geoJsonfeature;\n}\nfunction parseProperties(feature, columns) {\n    if (!columns || columns.length === 0)\n        return;\n    const array = feature.propertiesArray();\n    const view = new DataView(array.buffer, array.byteOffset);\n    const length = feature.propertiesLength();\n    let offset = 0;\n    const properties = {};\n    while (offset < length) {\n        const i = view.getUint16(offset, true);\n        offset += 2;\n        const column = columns[i];\n        switch (column.type) {\n            case ColumnType.Bool: {\n                properties[column.name] = !!view.getUint8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.Byte: {\n                properties[column.name] = view.getInt8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.UByte: {\n                properties[column.name] = view.getUint8(offset);\n                offset += 1;\n                break;\n            }\n            case ColumnType.Short: {\n                properties[column.name] = view.getInt16(offset, true);\n                offset += 2;\n                break;\n            }\n            case ColumnType.UShort: {\n                properties[column.name] = view.getUint16(offset, true);\n                offset += 2;\n                break;\n            }\n            case ColumnType.Int: {\n                properties[column.name] = view.getInt32(offset, true);\n                offset += 4;\n                break;\n            }\n            case ColumnType.UInt: {\n                properties[column.name] = view.getUint32(offset, true);\n                offset += 4;\n                break;\n            }\n            case ColumnType.Long: {\n                properties[column.name] = Number(view.getBigInt64(offset, true));\n                offset += 8;\n                break;\n            }\n            case ColumnType.ULong: {\n                properties[column.name] = Number(view.getBigUint64(offset, true));\n                offset += 8;\n                break;\n            }\n            case ColumnType.Double: {\n                properties[column.name] = view.getFloat64(offset, true);\n                offset += 8;\n                break;\n            }\n            case ColumnType.String: {\n                const length = view.getUint32(offset, true);\n                offset += 4;\n                const decoder = new TextDecoder();\n                properties[column.name] = decoder.decode(array.subarray(offset, offset + length));\n                offset += length;\n                break;\n            }\n            default:\n                throw new Error('Unknown type');\n        }\n    }\n    return properties;\n}\n//# sourceMappingURL=feature.js.map","const NODE_RECT_LEN = 8 * 4;\nconst NODE_INDEX_LEN = 4;\nexport function size(numItems, nodeSize) {\n    nodeSize = Math.min(Math.max(+nodeSize, 2), 65535);\n    let n = numItems;\n    let numNodes = n;\n    do {\n        n = Math.ceil(n / nodeSize);\n        numNodes += n;\n    } while (n !== 1);\n    const numNonLeafNodes = numNodes - numItems;\n    const minAlign = numNonLeafNodes % 2;\n    return numNodes * NODE_RECT_LEN + (numNonLeafNodes + minAlign) * NODE_INDEX_LEN;\n}\n//# sourceMappingURL=packedrtree.js.map","import { flatbuffers } from 'flatbuffers';\nimport slice from 'slice-source/index.js';\nimport ColumnMeta from '../ColumnMeta';\nimport ColumnType from '../ColumnType';\nimport { Header, Column } from '../header_generated';\nimport { Feature } from '../feature_generated';\nimport HeaderMeta from '../HeaderMeta';\nimport { buildFeature, fromFeature } from './feature';\nimport { toGeometryType } from '../generic/geometry';\nimport * as tree from '../packedrtree';\nconst SIZE_PREFIX_LEN = 4;\nconst FEATURE_OFFSET_LEN = 8;\nconst magicbytes = new Uint8Array([0x66, 0x67, 0x62, 0x02, 0x66, 0x67, 0x62, 0x00]);\nexport function serialize(featurecollection) {\n    const headerMeta = introspectHeaderMeta(featurecollection);\n    const header = buildHeader(featurecollection, headerMeta);\n    const features = featurecollection.features\n        .map(f => buildFeature(f, headerMeta));\n    const featuresLength = features\n        .map(f => f.length)\n        .reduce((a, b) => a + b);\n    const uint8 = new Uint8Array(magicbytes.length + header.length + featuresLength);\n    uint8.set(header, magicbytes.length);\n    let offset = magicbytes.length + header.length;\n    for (const feature of features) {\n        uint8.set(feature, offset);\n        offset += feature.length;\n    }\n    uint8.set(magicbytes);\n    return uint8;\n}\nexport function deserialize(bytes) {\n    if (!bytes.subarray(0, 7).every((v, i) => magicbytes[i] === v))\n        throw new Error('Not a FlatGeobuf file');\n    const bb = new flatbuffers.ByteBuffer(bytes);\n    const headerLength = bb.readUint32(magicbytes.length);\n    bb.setPosition(magicbytes.length + SIZE_PREFIX_LEN);\n    const header = Header.getRoot(bb);\n    const count = header.featuresCount().toFloat64();\n    const columns = [];\n    for (let j = 0; j < header.columnsLength(); j++) {\n        const column = header.columns(j);\n        columns.push(new ColumnMeta(column.name(), column.type()));\n    }\n    const headerMeta = new HeaderMeta(header.geometryType(), columns);\n    let offset = magicbytes.length + SIZE_PREFIX_LEN + headerLength;\n    const indexNodeSize = header.indexNodeSize();\n    if (indexNodeSize > 0)\n        offset += tree.size(count, indexNodeSize) + (count * FEATURE_OFFSET_LEN);\n    const features = [];\n    for (let i = 0; i < count; i++) {\n        const bb = new flatbuffers.ByteBuffer(bytes);\n        const featureLength = bb.readUint32(offset);\n        bb.setPosition(offset + SIZE_PREFIX_LEN);\n        const feature = Feature.getRoot(bb);\n        features.push(fromFeature(feature, headerMeta));\n        offset += SIZE_PREFIX_LEN + featureLength;\n    }\n    return {\n        type: 'FeatureCollection',\n        features,\n    };\n}\nexport async function* deserializeStream(stream) {\n    const reader = slice(stream);\n    let bytes = await reader.slice(8);\n    if (!bytes.every((v, i) => magicbytes[i] === v))\n        throw new Error('Not a FlatGeobuf file');\n    bytes = await reader.slice(4);\n    let bb = new flatbuffers.ByteBuffer(bytes);\n    const headerLength = bb.readUint32(0);\n    bytes = await reader.slice(headerLength);\n    bb = new flatbuffers.ByteBuffer(bytes);\n    const header = Header.getRoot(bb);\n    const count = header.featuresCount().toFloat64();\n    const columns = [];\n    for (let j = 0; j < header.columnsLength(); j++) {\n        const column = header.columns(j);\n        columns.push(new ColumnMeta(column.name(), column.type()));\n    }\n    const headerMeta = new HeaderMeta(header.geometryType(), columns);\n    const indexNodeSize = header.indexNodeSize();\n    if (indexNodeSize > 0)\n        await reader.slice(tree.size(count, indexNodeSize) + (count * FEATURE_OFFSET_LEN));\n    for (let i = 0; i < count; i++) {\n        bytes = await reader.slice(4);\n        bb = new flatbuffers.ByteBuffer(bytes);\n        const featureLength = bb.readUint32(0);\n        bytes = await reader.slice(featureLength);\n        const bytesAligned = new Uint8Array(featureLength + 4);\n        bytesAligned.set(bytes, 4);\n        bb = new flatbuffers.ByteBuffer(bytesAligned);\n        bb.setPosition(SIZE_PREFIX_LEN);\n        const feature = Feature.getRoot(bb);\n        yield fromFeature(feature, headerMeta);\n    }\n}\nfunction buildColumn(builder, column) {\n    const nameOffset = builder.createString(column.name);\n    Column.start(builder);\n    Column.addName(builder, nameOffset);\n    Column.addType(builder, column.type);\n    return Column.end(builder);\n}\nfunction buildHeader(featurecollection, header) {\n    const length = featurecollection.features.length;\n    const builder = new flatbuffers.Builder(0);\n    let columnOffsets = null;\n    if (header.columns)\n        columnOffsets = Header.createColumnsVector(builder, header.columns.map(c => buildColumn(builder, c)));\n    const nameOffset = builder.createString('L1');\n    Header.start(builder);\n    Header.addFeaturesCount(builder, new flatbuffers.Long(length, 0));\n    Header.addGeometryType(builder, header.geometryType);\n    Header.addIndexNodeSize(builder, 0);\n    if (columnOffsets)\n        Header.addColumns(builder, columnOffsets);\n    Header.addName(builder, nameOffset);\n    const offset = Header.end(builder);\n    builder.finishSizePrefixed(offset);\n    return builder.asUint8Array();\n}\nfunction valueToType(value) {\n    if (typeof value === 'boolean')\n        return ColumnType.Bool;\n    else if (typeof value === 'number')\n        if (value % 1 === 0)\n            return ColumnType.Int;\n        else\n            return ColumnType.Double;\n    else if (typeof value === 'string')\n        return ColumnType.String;\n    else if (value === null)\n        return ColumnType.String;\n    else\n        throw new Error(`Unknown type (value '${value}')`);\n}\nfunction introspectHeaderMeta(featurecollection) {\n    const feature = featurecollection.features[0];\n    const properties = feature.properties;\n    let columns = null;\n    if (properties)\n        columns = Object.keys(properties)\n            .map(k => new ColumnMeta(k, valueToType(properties[k])));\n    const geometryTypeNamesSet = new Set();\n    for (const f of featurecollection.features)\n        geometryTypeNamesSet.add(feature.geometry.type);\n    const headerMeta = new HeaderMeta(toGeometryType(feature.geometry.type), columns);\n    return headerMeta;\n}\n//# sourceMappingURL=featurecollection.js.map","import { flatbuffers } from 'flatbuffers';\nimport { deserialize as fcDeserialize, deserializeStream as fcDeserializeStream, serialize as fcSerialize } from './geojson/featurecollection';\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\nflatbuffers.Builder.prototype.finish = function (root_table, opt_file_identifier, opt_size_prefix) {\n    var size_prefix = opt_size_prefix ? true : false;\n    if (opt_file_identifier) {\n        var file_identifier = opt_file_identifier;\n        this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n            flatbuffers.FILE_IDENTIFIER_LENGTH + (size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0));\n        if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n            throw new Error('FlatBuffers: file identifier must be length ' +\n                flatbuffers.FILE_IDENTIFIER_LENGTH);\n        }\n        for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n            this.writeInt8(file_identifier.charCodeAt(i));\n        }\n    }\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT + (size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0));\n    this.addOffset(root_table);\n    if (size_prefix) {\n        this.addInt32(this.bb.capacity() - this.space);\n    }\n    this.bb.setPosition(this.space);\n};\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n    this.finish(root_table, opt_file_identifier, true);\n};\nexport function serialize(geojson) {\n    const bytes = fcSerialize(geojson);\n    return bytes;\n}\nexport function deserialize(bytes) {\n    const geojson = fcDeserialize(bytes);\n    return geojson;\n}\nexport function deserializeStream(stream) {\n    const geojson = fcDeserializeStream(stream);\n    return geojson;\n}\n//# sourceMappingURL=geojson.js.map"],"names":["flatbuffers","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","this","create","ZERO","prototype","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","i","writeInt8","value","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","set","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","length","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","s","utf8","codePoint","a","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","ColumnType","concat","SliceSource","source","_source","_array","empty","_index","read","that","array","then","done","undefined","slice","index","Promise","resolve","cancel","ColumnMeta","[object Object]","name","type","GeometryType","Column","__init","optionalEncoding","Byte","builder","nameOffset","start","addName","addType","end","Crs","orgOffset","code","descriptionOffset","wktOffset","addOrg","addCode","addDescription","addWkt","Header","byteOffset","Unknown","envelopeOffset","data","numElems","geometryType","hasZ","hasM","hasT","hasTM","columnsOffset","featuresCount","indexNodeSize","crsOffset","addEnvelope","addGeometryType","addHasZ","addHasM","addHasT","addHasTM","addColumns","addFeaturesCount","addIndexNodeSize","addCrs","Geometry","Uint32Array","endsOffset","xyOffset","zOffset","mOffset","tOffset","tmOffset","partsOffset","addEnds","addXy","addZ","addM","addT","addTm","addParts","Feature","geometryOffset","propertiesOffset","addGeometry","addProperties","HeaderMeta","columns","flat","reduce","acc","val","Array","isArray","pairFlatCoordinates","coordinates","newArray","toGeometryType","parseGeometry","geometry","cs","xy","ends","parts","css","map","geometries","extractParts","from","e","fromGeometry","GeometryCollection","partsLength","part","partType","MultiPolygon","g","xyArray","Point","MultiPoint","LineString","MultiLineString","Polygon","endsArray","toGeoJsonCoordinates","buildFeature","feature","header","propertiesArray","view","DataView","column","properties","setUint16","Bool","setUint8","Short","setInt16","UShort","Int","setInt32","UInt","setUint32","setBigInt64","BigInt","setBigUint64","Double","setFloat64","str","stringArray","TextEncoder","encode","createPropertiesVector","buildGeometry","parsedGeometry","partOffsets","createPartsVector","coordsOffset","createXyVector","createEndsVector","featureOffset","finishSizePrefixed","fromFeature","geojsonGeometry","geojsonProperties","propertiesLength","getUint16","getUint8","getInt8","UByte","getInt16","getInt32","getUint32","Number","getBigInt64","ULong","getBigUint64","getFloat64","decoder","TextDecoder","decode","parseProperties","geoJsonfeature","NODE_RECT_LEN","NODE_INDEX_LEN","numItems","nodeSize","Math","min","max","n","numNodes","ceil","numNonLeafNodes","SIZE_PREFIX_LEN","FEATURE_OFFSET_LEN","magicbytes","serialize","featurecollection","headerMeta","features","Object","keys","k","valueToType","geometryTypeNamesSet","Set","f","add","introspectHeaderMeta","columnOffsets","createColumnsVector","buildColumn","buildHeader","featuresLength","uint8","async","deserializeStream","stream","reader","getReader","every","v","headerLength","getRoot","count","columnsLength","tree.size","featureLength","bytesAligned","SIZE_PREFIX_LENGTH","opt_size_prefix","size_prefix","fcDeserialize","fcDeserializeStream","geojson","fcSerialize"],"mappings":"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"}